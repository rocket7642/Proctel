//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""Turret Creation"",
            ""id"": ""dc1d8fd7-ece5-4ad4-8bda-2aab3608b23c"",
            ""actions"": [
                {
                    ""name"": ""Drag and Drop"",
                    ""type"": ""Value"",
                    ""id"": ""f5b77fb9-b699-4c4f-ad7f-2ce9e3efb032"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Camera Pos"",
                    ""type"": ""Value"",
                    ""id"": ""a5bf40eb-5190-4916-8617-254b25e62718"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Camera Rot"",
                    ""type"": ""Value"",
                    ""id"": ""93ed2af8-964f-4dc0-9d22-389b04914861"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""94a83f79-9b85-4b21-9f96-9ed3aff487ba"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Drag and Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""18d0177f-1a8f-4438-8939-13b54f58a916"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Camera Pos"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4c6e5ece-3f27-4dd6-91b7-bd5d55b8d0a4"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Rotate Camera Pos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8a176b0a-820d-4604-9cfd-dbfa61544f6e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Rotate Camera Pos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5a513180-6cb3-4e0f-9aa8-ca5ee3cb4dfd"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Rotate Camera Pos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ac4f093f-143f-4da1-8efd-1f35e9405ebf"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Rotate Camera Pos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""27e8bf57-5260-48a3-8c49-97a09bf07c5b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Camera Pos"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""eacbf2f0-9c8c-48aa-a5fa-b37889add1d1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Rotate Camera Pos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cae8945a-cc00-44c2-acab-30c720cb64e8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Rotate Camera Pos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6d6d5e44-ec4f-44d9-bab6-ffdcea6eb6d3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Rotate Camera Pos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e2149422-62f4-40ca-86fd-c22d8be97b79"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Rotate Camera Pos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""8b61e085-dd23-4eeb-8fee-431f506a20b8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Camera Rot"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""01ffce83-c93e-4e4d-845d-3955e7dbb6f9"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Rotate Camera Rot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9c7aed10-eea1-45b1-b869-5ae92527a32f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Rotate Camera Rot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Testing Functions"",
            ""id"": ""afa28ff6-e01c-495b-8f81-3cc3dd8fbc49"",
            ""actions"": [
                {
                    ""name"": ""Spawn"",
                    ""type"": ""Value"",
                    ""id"": ""2bdea949-3ac1-4c84-8901-e86a1b10be56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3c3a50e0-4199-4018-a327-c208a769a284"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Spawn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Turret Creation
        m_TurretCreation = asset.FindActionMap("Turret Creation", throwIfNotFound: true);
        m_TurretCreation_DragandDrop = m_TurretCreation.FindAction("Drag and Drop", throwIfNotFound: true);
        m_TurretCreation_RotateCameraPos = m_TurretCreation.FindAction("Rotate Camera Pos", throwIfNotFound: true);
        m_TurretCreation_RotateCameraRot = m_TurretCreation.FindAction("Rotate Camera Rot", throwIfNotFound: true);
        // Testing Functions
        m_TestingFunctions = asset.FindActionMap("Testing Functions", throwIfNotFound: true);
        m_TestingFunctions_Spawn = m_TestingFunctions.FindAction("Spawn", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Turret Creation
    private readonly InputActionMap m_TurretCreation;
    private List<ITurretCreationActions> m_TurretCreationActionsCallbackInterfaces = new List<ITurretCreationActions>();
    private readonly InputAction m_TurretCreation_DragandDrop;
    private readonly InputAction m_TurretCreation_RotateCameraPos;
    private readonly InputAction m_TurretCreation_RotateCameraRot;
    public struct TurretCreationActions
    {
        private @Player m_Wrapper;
        public TurretCreationActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @DragandDrop => m_Wrapper.m_TurretCreation_DragandDrop;
        public InputAction @RotateCameraPos => m_Wrapper.m_TurretCreation_RotateCameraPos;
        public InputAction @RotateCameraRot => m_Wrapper.m_TurretCreation_RotateCameraRot;
        public InputActionMap Get() { return m_Wrapper.m_TurretCreation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TurretCreationActions set) { return set.Get(); }
        public void AddCallbacks(ITurretCreationActions instance)
        {
            if (instance == null || m_Wrapper.m_TurretCreationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TurretCreationActionsCallbackInterfaces.Add(instance);
            @DragandDrop.started += instance.OnDragandDrop;
            @DragandDrop.performed += instance.OnDragandDrop;
            @DragandDrop.canceled += instance.OnDragandDrop;
            @RotateCameraPos.started += instance.OnRotateCameraPos;
            @RotateCameraPos.performed += instance.OnRotateCameraPos;
            @RotateCameraPos.canceled += instance.OnRotateCameraPos;
            @RotateCameraRot.started += instance.OnRotateCameraRot;
            @RotateCameraRot.performed += instance.OnRotateCameraRot;
            @RotateCameraRot.canceled += instance.OnRotateCameraRot;
        }

        private void UnregisterCallbacks(ITurretCreationActions instance)
        {
            @DragandDrop.started -= instance.OnDragandDrop;
            @DragandDrop.performed -= instance.OnDragandDrop;
            @DragandDrop.canceled -= instance.OnDragandDrop;
            @RotateCameraPos.started -= instance.OnRotateCameraPos;
            @RotateCameraPos.performed -= instance.OnRotateCameraPos;
            @RotateCameraPos.canceled -= instance.OnRotateCameraPos;
            @RotateCameraRot.started -= instance.OnRotateCameraRot;
            @RotateCameraRot.performed -= instance.OnRotateCameraRot;
            @RotateCameraRot.canceled -= instance.OnRotateCameraRot;
        }

        public void RemoveCallbacks(ITurretCreationActions instance)
        {
            if (m_Wrapper.m_TurretCreationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITurretCreationActions instance)
        {
            foreach (var item in m_Wrapper.m_TurretCreationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TurretCreationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TurretCreationActions @TurretCreation => new TurretCreationActions(this);

    // Testing Functions
    private readonly InputActionMap m_TestingFunctions;
    private List<ITestingFunctionsActions> m_TestingFunctionsActionsCallbackInterfaces = new List<ITestingFunctionsActions>();
    private readonly InputAction m_TestingFunctions_Spawn;
    public struct TestingFunctionsActions
    {
        private @Player m_Wrapper;
        public TestingFunctionsActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @Spawn => m_Wrapper.m_TestingFunctions_Spawn;
        public InputActionMap Get() { return m_Wrapper.m_TestingFunctions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestingFunctionsActions set) { return set.Get(); }
        public void AddCallbacks(ITestingFunctionsActions instance)
        {
            if (instance == null || m_Wrapper.m_TestingFunctionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestingFunctionsActionsCallbackInterfaces.Add(instance);
            @Spawn.started += instance.OnSpawn;
            @Spawn.performed += instance.OnSpawn;
            @Spawn.canceled += instance.OnSpawn;
        }

        private void UnregisterCallbacks(ITestingFunctionsActions instance)
        {
            @Spawn.started -= instance.OnSpawn;
            @Spawn.performed -= instance.OnSpawn;
            @Spawn.canceled -= instance.OnSpawn;
        }

        public void RemoveCallbacks(ITestingFunctionsActions instance)
        {
            if (m_Wrapper.m_TestingFunctionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestingFunctionsActions instance)
        {
            foreach (var item in m_Wrapper.m_TestingFunctionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestingFunctionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestingFunctionsActions @TestingFunctions => new TestingFunctionsActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface ITurretCreationActions
    {
        void OnDragandDrop(InputAction.CallbackContext context);
        void OnRotateCameraPos(InputAction.CallbackContext context);
        void OnRotateCameraRot(InputAction.CallbackContext context);
    }
    public interface ITestingFunctionsActions
    {
        void OnSpawn(InputAction.CallbackContext context);
    }
}
